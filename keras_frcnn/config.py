from keras import backend as K
import math

class Config:

	def __init__(self):

		self.verbose = True


		self.network = 'resnet50'

		# setting for data augmentation
		self.use_horizontal_flips = False
		self.use_vertical_flips = False
		self.rot_90 = False

		# anchor box scales
		self.anchor_box_scales = [128, 256, 512]

		# anchor box ratios
		self.anchor_box_ratios = [[1, 1], [1./math.sqrt(2), 2./math.sqrt(2)], [2./math.sqrt(2), 1./math.sqrt(2)]]

		# size to resize the smallest side of the image
		self.im_size = 600

		# image channel-wise mean to subtract
		self.img_channel_mean = [103.939, 116.779, 123.68]
		self.img_scaling_factor = 1.0

		# number of ROIs at once
		self.num_rois = 32

		# stride at the RPN (this depends on the network configuration)
		self.rpn_stride = 16

		self.balanced_classes = False

		# scaling the stdev
		self.std_scaling = 4.0
		self.classifier_regr_std = [8.0, 8.0, 4.0, 4.0]

		# overlaps for RPN
		self.rpn_min_overlap = 0.3
		self.rpn_max_overlap = 0.7

		# overlaps for classifier ROIs
		self.classifier_min_overlap = 0.1
		self.classifier_max_overlap = 0.5

		# placeholder for the class mapping, automatically generated by the parser
		self.class_mapping = None

		#location of pretrained weights for the base network 
		# weight files can be found at:
		# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_th_dim_ordering_th_kernels_notop.h5
		# https://github.com/fchollet/deep-learning-models/releases/download/v0.2/resnet50_weights_tf_dim_ordering_tf_kernels_notop.h5

		self.model_path = '/media/e813/D/weights/kerash5/frcnn/TST2/model_frcnn.vgg.hdf5'#'model_frcnn.vgg.hdf5'
		self.holy_img_weight_path = '/media/e813/D/weights/kerash5/cac/xunlian_ori/'
		self.pascal_voc_year = ['VOC2007']

		self.train_path = '/home/e813/dataset/VOCdevkit_2007_trainval'
		#self.input_weight_path = '/media/e813/D/weights/kerash5/resnet50/resnet50_weights_tf_dim_ordering_tf_kernels.h5'
		self.input_weight_path = '/media/e813/D/weights/kerash5/frcnn/TST2/model_holyclassifier.hdf5'
		self.output_weight_path = '/media/e813/D/weights/kerash5/frcnn/tstVOC/model_frcnn.hdf5'
		self.config_filepath = 'config.pickle'
		self.parser = 'pascal_voc'
		self.num_epochs = 5
		self.ori_res50_withtop = '/media/e813/D/weights/kerash5/resnet50/resnet50_weights_tf_dim_ordering_tf_kernels.h5'
		self.part_name = 'tail'

	def result_to_save(self):
		return '/media/e813/D/weights/kerash5/cac/part_res/{}/result.pkl'.format(self.part_name)
		# Path to training data.
	def weigth_to_save_load(self, nums):
		a = '/media/e813/D/weights/kerash5/cac/part_res/back'
		return '/media/e813/D/weights/kerash5/cac/part_res_cut/{}/weight_cut{}.hdf5'.format(self.part_name,nums)

	def model_to_save_load(self, nums):
		return '/media/e813/D/weights/kerash5/cac/res_ori614/model_{}.hdf5'.format(nums)

	def date_augment_cfg(self,trainable):
		self.trainable = trainable
		augment = {}
		augment['flip_hor'] = True
		augment['cut'] = True
		augment['hsv'] = True
		augment['rot'] = False
		augment['gamma'] = True
		if augment['hsv']:
			self.hsv_hue_v = 10
			self.hsv_sat_v = 0.1
			self.hsv_val_v = 0.1
		if augment['cut']:
			self.cut_max = 6
			self.cut_min = 3
		if augment['rot']:
			self.rot_angle_v = 10
		if augment['gamma']:
			self.gamma_v = 1.0
			pass
		self.aug_cfg = augment